								HTTP (HyperText Transfer Protocol) 
	Este un protocol de comunicație folosit pentru transferul de informații pe web. Este modul prin care 
browserul tău (clientul) comunică cu un server pentru a cere sau trimite date.

Pe scurt:
HyperText = text care conține linkuri către alte pagini.

Transfer = trimiterea datelor între client și server.

Protocol = un set de reguli care definesc cum are loc comunicarea.

								HTTP vs HTTPS:

HTTP este necriptat (nesigur).

HTTPS este HTTP cu criptare (SSL/TLS), deci datele sunt protejate.

HTTP este 
	text simplu
	fara state - nu pastreaza informatii despre client

					API (Application Programming Interface)

	Este o interfață care permite ca două aplicații să comunice între ele. Practic, un API este un set 
de reguli care definește cum poate un program să interacționeze cu alt program.

Exemplu de gandire

API-ul e ca un chelner într-un restaurant: tu (clientul) ceri ceva, chelnerul (API-ul) duce 
comanda la bucătărie (serverul) și îți aduce rezultatul înapoi.

Tipuri comune de API-uri:

API-uri Web (cele mai des întâlnite): permit aplicațiilor să comunice prin HTTP (ex: REST, GraphQL).

API-uri Locale: metode oferite de o bibliotecă sau framework (ex: .NET Framework are API-uri pentru 
lucrul cu fișiere, rețea etc.).


											REST (REpresentational State Transfer) 

Este un stil arhitectural folosit la construirea de API-uri web. Nu este un protocol în sine, ci 
un set de principii și convenții care fac comunicarea între client și server simplă, scalabilă și 
ușor de înțeles.

Caracteristici principale ale REST:

Stateless (fără stare)
	Fiecare cerere de la client trebuie să conțină toate informațiile necesare. Serverul
	nu „tine minte” starea dintre cereri.

Cache-uibil
	Răspunsurile de la API sunt create în așa fel încât să poată fi stocate în cache, pentru a reduce 
	timpul de răspuns și a îmbunătăți performanța aplicației.

Layered System (Sistem pe straturi)
	Arhitectura REST poate avea mai multe straturi (ex: servere proxy, load balancers, gateways), 
	iar clientul nu trebuie să știe dacă interacționează direct cu serverul final sau cu un intermediar.
	👉 Asta oferă scalabilitate și flexibilitate.

Uniform Interface (Interfață uniformă)

	Este caracteristica centrală a REST. O interfață comună între client și server simplifică 
arhitectura și face API-ul ușor de înțeles și utilizat.

Componentele cheie ale acestei constrângeri:

	Identificarea resurselor prin URI-uri

	Manipularea resurselor prin reprezentări (ex: JSON)

	Mesaje auto-descriptive (headers + body)

	HATEOAS (Hypermedia As The Engine Of Application State) – opțională și rar implementată complet

Resurse
	Totul este văzut ca o resursă: utilizatori, produse, articole etc. Fiecare resursă are un URL unic.


Metode HTTP standard

REST folosește metodele HTTP pentru acțiuni:

	GET – pentru citire

	POST – pentru creare

	PUT sau PATCH – pentru actualizare

	DELETE – pentru ștergere

Răspunsuri în format standard
	De obicei, REST API-urile răspund în format JSON (dar pot fi și XML sau altceva).

Routing-ul în API 

(Mai ales în contextul unui API RESTful) se referă la procesul de a direcționa cererile HTTP 
către metoda potrivită din codul serverului.

Routing = asocierea unei adrese URL și a unei metode HTTP (ex: GET, POST) cu o funcție sau 
metodă din controller.


											Clean Architecture

Este un stil arhitectural propus de Robert C. Martin (cunoscut și ca "Uncle Bob") pentru a crea aplicații 
ușor de întreținut, scalabile și independente de tehnologii externe.


Principii de bază în Clean Architecture


Independența față de framework-uri
	→ Codul aplicației nu depinde de framework-uri externe. Framework-urile sunt detalii și pot fi înlocuite
ușor.

Testabilitate
	→ Logica aplicației (regulile de business) poate fi testată fără să depindă de UI, baza de date, 
sau alte servicii externe.

Independență față de UI și Bază de Date
	→ UI și baza de date sunt detalii periferice, nu afectează logica aplicației.

Separarea responsabilităților
	→ Fiecare strat (layer) are o responsabilitate clară și nu trebuie să încalce teritoriul altuia.

Regula dependenței (Dependency Rule)
	→ Codul sursă poate depinde doar spre interior (spre reguli de business). Niciodată invers



Domain Layer (nucleul aplicației)
	Conține entități și reguli de business.
	Este total independent de orice tehnologie externă.

Application Layer (use cases)
	Conține cazurile de utilizare și logica specifică aplicației.
	Apelează entitățile din Domain și definește interfețele pentru repo-uri.

Infrastructure Layer
	Implementări concrete (DB, fișiere, API calls).
	Codul de aici implementează interfețele definite în Application.


Presentation Layer
	De obicei, API controllers, UI, frontend.
	Apelează use case-urile din Application.



	CQRS (Command Query Responsibility Segregation)

		Este un pattern arhitectural folosit în dezvoltarea de aplicații, care separă operațiile de citire
(Query) de cele de scriere (Command). Acest model este util în aplicații complexe, unde logica de citire
este semnificativ diferită de cea de scriere.


Serilog

Serilog este o bibliotecă de logging foarte populară pentru .NET, cunoscută pentru:

	Structured logging – în loc de simple mesaje text, poți salva date structurate (ex: JSON).
	Sinks – suportă scrierea logurilor în multe destinații: fișiere, console, baze de date, Seq, Elasticsearch, etc.
	Configurabilitate ridicată – poate fi configurat prin cod sau fișier (ex: appsettings.json).
	Integrări bune – se integrează ușor cu ASP.NET Core, .NET Generic Host, etc.

 

					Middleware

	Sunt componente software care intervin între cererea (request) primită de la client și răspunsul (response) 
generat de aplicație. Ele sunt folosite pentru a procesa, modifica sau filtra cererile și răspunsurile într-o 
aplicație web.

📌 În .NET (ASP.NET Core), middleware-urile:
	Sunt componente care fac parte din pipeline-ul de procesare a cererilor HTTP.
	Fiecare middleware poate:
		procesa cererea (ex: autentificare, logare, redirecționare);
		decide dacă va trimite un răspuns imediat sau va apela următorul middleware;
		modifica răspunsul care vine înapoi.


		Autorizare
Autorizarea asigura 
	Securitate
	Intimitate
	Imbunatateste experienta utilizatorului

Accesul asupra resurselor se poate face pe baza de

RBAC (Role-Based Access Control) – 
controlul accesului se face pe baza rolurilor atribuite utilizatorilor. 
De exemplu, un utilizator cu rolul „Admin” are acces la mai multe resurse decât unul cu rolul „User”.

ABAC (Attribute-Based Access Control) – 
controlul accesului se face pe baza atributelor (ale utilizatorului, resursei, contextului etc.). 
De exemplu, se poate permite accesul doar în funcție de ora din zi, locație, tipul documentului etc.